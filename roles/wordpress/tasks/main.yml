---
# tasks file for wordpress
-include: pre.yml

- name: Ensure WordPress {{ wp_home_path }} directory exists
  file:
    path: "{{ wp_home_path }}"
    state: directory
    owner: www-data
    group: www-data
    recurse: yes

- name: Download and install latest WordPress
  command: wp core download --path={{ wp_home_path }} --locale=en_US --version=latest
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true

- name: Set WordPress {{ wp_home_path }} permissions
  file:
    path: "{{ wp_home_path }}" 
    owner: www-data
    group: www-data
    mode: 0755
    recurse: yes
    state: directory

- name: Create database for WordPress
  mysql_db:
    name: "{{ wp_db_name }}" 
    state: present
    encoding: utf8mb4
    collation: utf8mb4_unicode_ci

- name: Generate random password for WordPress MySQL user
  shell: apg -a 1 -n 1 -m 24 -x 24 -M NCL
  register: wp_db_password
# no_log: True

- name: Create WordPress MySQL user
  mysql_user:
    name: "{{ wp_db_name }}_user"
    password: "{{ wp_db_password.stdout }}"
    state: present
    priv: "{{ wp_db_name }}.*:ALL"
    update_password: always

- name: Generate wp-config.php
  shell: wp config create --dbname={{ wp_db_name }} --dbuser={{ wp_db_name }}_user --dbpass={{ wp_db_password.stdout }} --dbprefix={{ wp_db_prefix }} --dbcharset=utf8mb4 --dbcollate=utf8mb4_unicode_ci --locale=en_US --extra-php --force
  become: true
  become_method: sudo
  become_user: www-data
  args:
    chdir: "{{ wp_home_path }}" 
    stdin: |
      define( 'WP_DEBUG', true );
      define( 'SAVEQUERIES', true );

- name: Install WordPress in 5 seconds and create tables in the database
  command: wp core install --url={{ wp_domain }} --title="{{ wp_title}}" --admin_user=admin --admin_password={{ wp_db_password.stdout }} --admin_email={{ wp_admin_email }} --path={{ wp_home_path }}
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true

- name: Install Wordpress plugins for {{ wordpress_site }} which are defined in wordpress/vars
  command: wp plugin install {{ item }} --path={{ wp_home_path }} --force --activate --activate-network
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true
  with_items: 
    - "{{ wp_plugins }}"

- name: Install Wordpress themes for {{ wordpress_site }} which are defined in wordpress/vars
  command: wp theme install {{ item }} --path={{ wp_home_path }} --force
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true
  with_items: 
    - "{{ wp_themes }}"

- name: Make the permalink based on the blog post name
  command: wp option update permalink_structure '/%postname%/' --path={{ wp_home_path }}
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true

- name: Update the home url
  command: wp option update home 'https://{{ wp_domain }}' --path={{ wp_home_path }}
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true

- name: Update the site url
  command: wp option update siteurl 'https://{{ wp_domain }}' --path={{ wp_home_path }}
  become: true
  become_method: sudo
  become_user: www-data
  ignore_errors: true

- name: copy htaccess file 
  copy:
    src: htaccess
    dest: "{{ wp_home_path }}/.htaccess"
    mode: 0775
    owner: www-data
    group: www-data

- name: If no domain defined link create link from {{ ansible_host }}/{{ wordpress_site }} to {{ wp_home_path }}
  file:
    src: "{{ wp_home_path }}"
    dest: "/var/www/{{ ansible_host }}/{{ wordpress_site }}"
    owner: www-data
    group: www-data
    state: link
  when: "'/' in wp_domain"

- name: Ensure /var/log/apache2/{{ wordpress_site }} directory exists
  file:
    path: /var/log/apache2/{{ wordpress_site }}
    state: directory
  when: "not '/' in wp_domain"

- name: Setup host.conf for {{ wordpress_site }} 
  template:
    src: host.conf.j2
    dest: /etc/apache2/sites-available/{{ wordpress_site }}.conf
  when: "not '/' in wp_domain"

- name: Setup secure host-ssl.conf for {{ wordpress_site }} 
  template:
    src: host-ssl.conf.j2
    dest: /etc/apache2/sites-available/{{ wordpress_site }}-ssl.conf
  when: "not '/' in wp_domain"

- name: Activate new host
  command: a2ensite {{ wordpress_site }}
  when: "not '/' in wp_domain"
  notify:
    - restart apache

- name: Activate new secure host
  command: a2ensite {{ wordpress_site }}-ssl
  when: "not '/' in wp_domain"
  notify:
    - restart apache

- name: Create and install letsencrypt SSL certificate for apache using certbot
  command: "certbot --apache -d {{ wp_domain }} -m {{ wp_admin_email }} --agree-tos --noninteractive --redirect"
  when: "not '/' in wp_domain"
  notify:
    - restart apache

- name: Set letsencrypt cronjob for certificate auto renewal
  cron: name=letsencrypt_renewal special_time=monthly job="/usr/bin/certbot renew"
  when: "not '/' in wp_domain"
